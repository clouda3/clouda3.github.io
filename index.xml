<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云端的blog</title><link>https://clouda3.github.io/</link><description>Recent content on 云端的blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 22 May 2020 12:40:37 +0800</lastBuildDate><atom:link href="https://clouda3.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>使用ansible在多台客户机安装docker</title><link>https://clouda3.github.io/posts/ansible-deploy-docker-container/</link><pubDate>Fri, 22 May 2020 12:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/ansible-deploy-docker-container/</guid><description>Install ansible on server Ansible是一个开源配置管理工具，可以使用它来自动化任务，部署应用程序实现IT基础架构。Ansible可以用来自动化日常任务，比如，服务器的初始化配置、安全基线配置、更新和打补丁系统，安装软件包等 Ansible包括控制节点（Control node）也叫主机，受控节点（Managed nodes）也叫客户机,只在控制节点安装就好了 ansible 优点 只需要在主机上安装ansible软件，客户机不需要安装 通讯协议SSH协议和SFTP 可并行执行程序，默认情况下，forks值为5，可以按需，在配置文件中增大该值 ansible(centos)安装和配置 yum install ansible
为了使Ansible与客户端通信，需要使用用户帐户配置管理机和客户机。为了方便快捷安全，一般会配置证书方式连接客户机
ssh-keygen ssh-copy-id ansible@node ip 使用ad-hoc 在客户执行命令，相当于命令行 /etc/ansible/hosts,最好谨慎使用hosts配置，安全问题需要解决
[docker] 192.168.25.173 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=&amp;quot;xxx&amp;quot; 执行以下ping,命令里面的docker对应的上面文件的docker
ansible docker -m ping 使用ad-hoc命令管理软件包,安装
ansible docker -m yum -a &amp;quot;name=docker state=present&amp;quot; -b 使用ad-hoc命令管理软件包,设置默认启动
ansible docker -b -m service -a &amp;quot;name=docker enabled=yes&amp;quot; 使用ad-hoc命令管理软件包,启动
ansible docker -b -m service -a &amp;quot;name=httpd state=started&amp;quot; 使用ansible-playbook 部署docker test-ansile.</description></item><item><title>给nginx安装免费的证书</title><link>https://clouda3.github.io/posts/linux-cerbot/</link><pubDate>Fri, 08 May 2020 14:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/linux-cerbot/</guid><description>https vs http https比http安全原因是传输的过程中使用了加密，因为https在服务器端使用证书 证书的认证需要认证机构，随便一个https的证书阿里巴巴云最便宜的一年要2000多，aws更是贵到天上，所以对于个人程序员来来说最好有免费的证书 cerbot就是你的选择 cerbot简介 cerbot就是Electronic Frontier Foundation (EFF)这个机构给大家发的福利，简单的一句话来说就是给你提供3个月的免费证书，证书到期后继续免费续约，个人网站是用最方便，每三个月更新一次就可以了 cerbot 使用 cerbot 安装脚本
yum -y install yum-utils yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional sudo yum install certbot python2-certbot-nginx sudo certbot --nginx(sudo certbot certonly --nginx) echo &amp;quot;0 0,12 * * * root python -c &#39;import random; import time; time.sleep(random.random() * 3600)&#39; &amp;amp;&amp;amp; certbot renew -q&amp;quot; | sudo tee -a /etc/crontab &amp;gt; /dev/null (auto renewal) cerbot 证书验证 To confirm that your site is set up properly, visit https://yourwebsite.</description></item><item><title>Openvpn最简单的安装方式</title><link>https://clouda3.github.io/posts/linux-openvpn-install/</link><pubDate>Fri, 08 May 2020 12:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/linux-openvpn-install/</guid><description> 为什么会用到vpn vpn是我们经常会用到的工具，比如有些程序不允许我们在某些地区下载，有些网站我们没有办法看之类的，我们就vpn不管是pptp还是vpn无非改变都是路由问题，也就是你上网的出口的问题 openvpn openvpn是一款开源vpn软件，功能非常强大，用户非常多，遵循的是openvpn协议 缺点搭建有些复杂，但是有第三方的脚本协助搭建会非常简单
openvpn搭建借助于第三方脚本 作者git：https://github.com/Nyr/openvpn-install
wget https://git.io/vpn -O openvpn-install.sh &amp;amp;&amp;amp; bash openvpn-install.sh 最后生成一个*.ovpn文件
下载并安装openvpn gui：https://openvpn.net/community-downloads/
用安装好的客户端打开*.ovpn就可以登录远程的vpn服务器了</description></item><item><title>linux最大文件打开数</title><link>https://clouda3.github.io/posts/linux-file-max-open/</link><pubDate>Thu, 07 May 2020 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/linux-file-max-open/</guid><description> 文件最大打开数 如果服务器提供TCP服务（TCP层或者HTTP层），在并发访问量持续很高时，容易产生too many open files错误。这时查看netstat可以发现很多TIME_WAIT状态的链接，这说明大量链接处于半开状态，已经完成了请求响应，然后进行下一步操作，如果句柄数(文件打开数)超过了阈值，那就只能等待或者出错 解决方案 系统内核的修改
cat /proc/sys/fs/file-max sysctl -a sysctl -p 每个用户级别的修改
ulimit -n 1024000 (临时修改) vim /etc/security/limits.conf * soft nofile 2048 * hard nofile 2048 如果阿里云或者aws云里面的centos都是被优化过的，默认的1024都被修改成了65536了，所以对于大部分人来说足够用了</description></item><item><title>linux的tree命令</title><link>https://clouda3.github.io/posts/linux-tree/</link><pubDate>Wed, 06 May 2020 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/linux-tree/</guid><description>linux tree command Centos 是默认不带tree 命令的，如果要使用首先要install tree command
yum install -y tree 使用tree 显示目录的深度为2级
tree -L 2 . ├── easy-rsa-old-2.3.3 │ ├── configure.ac │ ├── COPYING │ ├── COPYRIGHT.GPL │ ├── distro │ ├── doc │ ├── easy-rsa │ └── Makefile.am ├── frgs.log ├── frp_0.32.1_linux_amd64 │ ├── frgs.log │ ├── frpc │ ├── frpc_full.ini │ ├── frpc.ini │ ├── frps │ ├── frps_full.ini │ ├── frps.ini │ ├── frps.</description></item><item><title>vpn客户端工具pptp介绍</title><link>https://clouda3.github.io/posts/pptp-client/</link><pubDate>Mon, 04 May 2020 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/pptp-client/</guid><description> pptp 安装 yum install ppp pptp pptp-setup -y
创建 链接文件 /etc/ppp/peers/pptp
pty &amp;quot;pptp 039.9966.org --nolaunchpppd --debug&amp;quot; name hk789 password ff800800 remotename PPTP require-mppe-128 require-mschap-v2 refuse-eap refuse-pap refuse-chap refuse-mschap noauth debug persist maxfail 0 defaultroute #replacedefaultroute #usepeerdns 执行命令 modprobe nf_conntrack_pptp pppd call pptp</description></item><item><title>k8s使用ingress总结</title><link>https://clouda3.github.io/posts/k8s-install-ingress/</link><pubDate>Sun, 03 May 2020 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/k8s-install-ingress/</guid><description>安装准备 Centos7.7 vm 或者真实的物理机三台(master一台,node两台) 硬件要求2GB ram,最低2CPU，最少32GB 硬盘 节点之间最好网络互通，如果不考虑安全可以关闭firewalld 可以访问到外部网络,因为需要网络资源，比如yum源和其他k8s需要的yaml文件 需要安装和配置 yum源配置 防火墙selinux的关闭与配置 swap分区配置 桥接ipv4流量交给iptables 文件句柄数的限制 Docker的安装 Kubeadmin,flannel 创建deployment,service,pod,ingress,ingress controller,kubernets-dashboard 具体安装步骤 VM 网络选择bridge模式 master:192.168.25.200 node:192.168.25.187&amp;frasl;192.168.25.188
防火墙
$ systemctl stop firewalld $ systemctl disable firewalld Selinux
$ sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot; /etc/selinux/config $ sed -i &amp;quot;s/^SELINUX=permissive/SELINUX=disabled/g&amp;quot; /etc/selinux/config $ setenforce 0 关闭swap
swapoff -a sed -i &#39;s/.*swap.*/#&amp;amp;/&#39; /etc/fstab 网络转发
cat &amp;gt; /etc/sysctl.d/k8s.conf &amp;lt;&amp;lt; EOF net.</description></item><item><title>vagrant使用介绍</title><link>https://clouda3.github.io/posts/vagrant-windows-template/</link><pubDate>Wed, 22 Apr 2020 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/vagrant-windows-template/</guid><description>vagrant 简介 VirtualBox 是一款开源虚拟机软件,vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源VirtualBox虚拟化系统，使用Chef创建自动化虚拟环境。 BBC Vagrant 是基于VirtualBox创建的虚拟机，并通过Vagrant进行打包而得到的VM环境。在虚拟机中部署好开发环境并建立虚拟机和实体机的文件共享，在开发时，可以通过实体机进行文件修改，并经过虚拟机中的环境执行，从而实现不同操作系统的工作环境的轻松部署。
安装 vagrant和virtualbox 下载并安装VirtualBox（ https://www.virtualbox.org/wiki/Downloads ）。
VirtualBox 4.3.12下载地址(windows请用此链接)：http://dlc-cdn.sun.com/virtualbox/4.3.12/index.html
下载并安装Vagrant（ http://www.vagrantup.com/downloads.html ）。
安装和定制box 下载windows 10 box文件。 https://app.vagrantup.com/mrlesmithjr/boxes/windows10/versions/1574780096/providers/virtualbox.box 到c:\vagrant\download
执行命令
vagrant box add win10 c:\vagrant\download\virtualbox.box cd c:\vagrant vagrant init win10 vagrant up 2&amp;gt; vagrant.log 查看模板文件c:\vagrant\Vagrantfile
$script = &amp;lt;&amp;lt;-&#39;SCRIPT&#39; echo &amp;quot;starting wechat&amp;quot; ipconfig &amp;gt; c:\ip.log C:\Users\wechat\WeChat.exe &amp;gt; c:\wechat.log netstat &amp;gt; c:\netstat.log echo &amp;quot;started wechat&amp;quot; SCRIPT Vagrant.</description></item><item><title>lvm空间扩容</title><link>https://clouda3.github.io/posts/linux-lvm-resize/</link><pubDate>Mon, 20 Apr 2020 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/linux-lvm-resize/</guid><description>[root@localhost ~]# df -H Filesystem Size Used Avail Use% Mounted on devtmpfs 17G 0 17G 0% /dev tmpfs 17G 0 17G 0% /dev/shm tmpfs 17G 9.1M 17G 1% /run tmpfs 17G 0 17G 0% /sys/fs/cgroup /dev/mapper/centos-root 54G 1.4G 53G 3% / /dev/sda2 1.1G 148M 916M 14% /boot /dev/sda1 210M 12M 198M 6% /boot/efi /dev/mapper/centos-home 12T 35M 12T 1% /home tmpfs 3.4G 0 3.4G 0% /run/user/0 分区不够合理 root 下面空间不够用
umount /home lvreduce -L 5T /dev/mapper/centos-home lvextend -L +5T /dev/mapper/centos-root xfs_growfs /dev/mapper/centos-root mkfs.</description></item><item><title>centos使用ssh-key免密登录</title><link>https://clouda3.github.io/posts/linux-key-gen/</link><pubDate>Fri, 03 Apr 2020 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/linux-key-gen/</guid><description> centos ssh login 免密码登录 修改linux主机sshd配置
vi /etc/ssh/sshd_config RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys /sbin/service sshd restart 生成密钥,包括 id_rsa私钥，id_rsa.pub公钥
ssh-keygen -t rsa 更改文件名
mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys 拷贝id_rsa文件内容到任何一个linux客户端,remote.pem,使用ssh登录
ssh -i remote.pem user@host</description></item><item><title>手把手使用Hugo搭建网站-高级篇</title><link>https://clouda3.github.io/posts/hugo-advanced-level-lesson/</link><pubDate>Tue, 26 Nov 2019 12:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/hugo-advanced-level-lesson/</guid><description>1.3. 手把手使用hugo搭建网站高级篇
1.3.1. 創建页面的目錄 hugo提供了目錄的支持table of content
創建目錄首先你的文章必須有標題 在layouts/_default/single.html 添加代碼 {{.TableOfContents}}
{{ define &amp;quot;main&amp;quot; -}} &amp;lt;div class=&amp;quot;post&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; &amp;lt;time datetime={{ .Date.Format &amp;quot;2006-01-02T15:04:05Z0700&amp;quot; }} class=&amp;quot;post-date&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/time&amp;gt; {{.TableOfContents}} {{ .Content }} &amp;lt;/div&amp;gt; {{ if .Site.DisqusShortname -}} &amp;lt;h2&amp;gt;Comments&amp;lt;/h2&amp;gt; {{ template &amp;quot;_internal/disqus.html&amp;quot; . }} {{- end }} {{ partial &amp;quot;related.html&amp;quot; . }} {{- end }}
1.3.2. 创建搜索 伪站内搜索 使用google cse</description></item><item><title>手把手使用Hugo搭建网站-中级篇</title><link>https://clouda3.github.io/posts/hugo-medium-level-lesson/</link><pubDate>Tue, 26 Nov 2019 11:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/hugo-medium-level-lesson/</guid><description>1.2. 手把手使用hugo搭建网站进阶篇
1.2.1. 自定义菜单 配置定义菜单栏
layouts/partials/sidebar.html
&amp;lt;aside class=&amp;quot;sidebar&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;container sidebar-sticky&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;sidebar-about&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;{{ .Site.Title }}&amp;lt;/h1&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt; {{ with .Site.Params.description }} {{.}} {{ else }}{{end}} &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;ul class=&amp;quot;sidebar-nav&amp;quot;&amp;gt; {{ $currentPage := . }} {{ range .Site.Menus.main -}} &amp;lt;li&amp;gt; &amp;lt;a class=&amp;quot;sidebar-nav-item{{if or ($currentPage.IsMenuCurrent &amp;quot;main&amp;quot; .) ($currentPage.HasMenuCurrent &amp;quot;main&amp;quot; .) }} active{{end}}&amp;quot; href=&amp;quot;{{ .URL }}&amp;quot; title=&amp;quot;{{ .Title }}&amp;quot;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; {{- end }} &amp;lt;/ul&amp;gt; &amp;lt;ul class=&amp;quot;sidebar-nav&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;p&amp;gt;{{ with .</description></item><item><title>手把手使用Hugo搭建网站-初级篇</title><link>https://clouda3.github.io/posts/hugo-entry-level-lesson/</link><pubDate>Tue, 26 Nov 2019 10:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/hugo-entry-level-lesson/</guid><description>1.1. 手把手使用hugo搭建网站初级篇
1.1.1. Demo使用hugo的网站 https://www.flysnow.org/ https://www.gohugo.io https://www.netlify.com/ https://gohugo.io/showcase/ https://www.smashingmagazine.com/
1.1.2. 部分主题 https://github.com/Vimux/Mainroad https://github.com/kingfsen/Mainroad https://themes.gohugo.io/academic/ https://themes.gohugo.io/beautifulhugo/ https://themes.gohugo.io/hyde/ https://themes.gohugo.io/hugo-theme-even/ https://github.com/rujews/maupassant-hugo
1.1.3. hugo跟wordpress其他建站工具的对比 wordpress 全球31%的网站使用wordpress，尽管他有各种主题和插件，但是也有非常多的缺点，安全性，seo不够友好，定制麻烦 hugo 最快的静态生成工具,seo友好，静态更安全，方便定制模板，缺点没有插件，如果要定制模板只能懂一点go的语法 wordpress是动态的并且还需要托管数据库，所以托管费用比较昂贵 hugo是生成静态的页面，在本地生成后上传到服务器就可以了，托管费用非常便宜，可以直接用免费的github托管 hugo不可以在线编辑
wordpress vs hugo
Tables 静态/动态 托管 安全性 访问速度 在线编辑 markdown wordpress 动态 复杂 需要经常升级 快 可以 不支持 hugo 静态 简单 不需要打补丁 非常快 不可以 支持</description></item><item><title>SAA-CO1考试之路</title><link>https://clouda3.github.io/posts/aws-saa-pass/</link><pubDate>Thu, 03 Oct 2019 10:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-saa-pass/</guid><description>考试心得 考试成绩 852 背景 工作用到aws不到1年 有多年java开发经验 linux管理员,持有RHCE 准备周期 3周從準備到考試 每天8-12小时 做过实验的知识点列表 VPN endpoint/nat gateway/internet gateway/vpn/subnet/ACL RDS/Aurora/Reshift/Aurora/DynamoDB (snaphost copy az or cross region,ebs type change ,autoscaling ,entryption ,backup/replica ,Multi A-z,read/write unit)
Cloudfront (OAI,SSL certificat ,validation TTL ,pre-signed URL)
S3 (static websit ,ACL ,bucket policy,lifecyle)
ec2 (Cloudwath agent install,ebs mount/unmount,snapshot,elasticip binding)
Cloud53 (A/alias .routing policy)
Athena on S3 SQL QUERY</description></item><item><title>aws sap passed</title><link>https://clouda3.github.io/posts/aws-sap-passed/</link><pubDate>Wed, 02 Oct 2019 10:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-sap-passed/</guid><description> 9.27 号考试通过了SAP（913分），心里终于落下一块石头.从开始准备到最后通过我用了数个星期的时间，平均每天超过10小时的准备.sap的难度比saa高不是一个级别的，涉及了大量的新的知识点.不仅仅需要知道每个知识点，还需要动手去实践，为此我写了20个几个blog都是尝试这里面的知识点，实际我做过的实验大概有40多个，几乎每天要做一个实验，因为时间的问题，没有把其他的整理到blog上来，也是一个遗憾，后面我会慢慢补充上来。 考前准备 aws 账号 ：做实验用 最好有一些linux/network/dev experience 最好熟悉一门编程语言,java/.net/python/ruby/go/nodejs 最好熟悉json/yaml 如果考过saa最好了，saa是非常基础的aws认证 如果考过saa，最好保证300小时以上的学习时间 考试内容准备 印度小哥的一个考试心得基本上面面俱到了 https://www.linkedin.com/pulse/preparing-aws-certified-solutions-architect-2019-sap-c01-agarwal/ bilibili 上印度小哥sap视频 https://www.bilibili.com/video/av66737718?from=search&amp;amp;seid=1011549087963751322 如果听的懂建议听听
bilibili 上cloud guru的sap视频 https://www.bilibili.com/video/av39285864?from=search&amp;amp;seid=1657200592137432769
aws 本上的get-started https://aws.amazon.com/getting-started/ 建议尝试里面大部分的实验内容，只有实验的多了才能够理解每个服务以及服务于服务之间的关联</description></item><item><title>aws x-ray</title><link>https://clouda3.github.io/posts/aws-x-ray/</link><pubDate>Thu, 12 Sep 2019 12:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-x-ray/</guid><description> AWS X-Ray 可以帮助开发人员分析与调试分布式生产应用程序，例如使用微服务架构构建的应用程序。借助 X-Ray，您可以了解应用程序及其底层服务的执行方式，从而识别和排查导致性能问题和错误的根本原因。X-Ray 可在请求通过应用程序时提供请求的端到端视图，并展示应用程序底层组件的映射。您可以使用 X-Ray 分析开发和生产中的应用程序，从简单的三层应用程序到包含上千种服务的复杂微服务应用程序。
簡單來說，xray是用來追踪服務與服務之間鏈條，每個服務之間的請求內容，時間，參數等信息
用api-gateway 和 lambda 實驗 本文用到的例子是前面的博文: Aws cloudformation deploy lambda and apigateway 只需要額外做以下兩步 開啟api-gateway的x-ray,api gateway console-&amp;gt; apis-&amp;gt;spring-boot-lambda-&amp;gt;stages-&amp;gt;Prod-&amp;gt;logs/tracing-&amp;gt;enable x-ray tracing 開啟lambda的x-ray,functions-&amp;gt;spring-boot-lambda-LambdaSpringBootFunction-7CK2QHXPRA6F-&amp;gt;aws x-ray:active tracing
test x-ray:fire a request to api gateway
open x-ray console:service map:you will see a picture like below:</description></item><item><title>accelerating aws migration</title><link>https://clouda3.github.io/posts/aws-migration/</link><pubDate>Tue, 10 Sep 2019 14:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-migration/</guid><description> aws migration from OP to cloud這是aws最注重的部分，關於遷移技術，aws提供了各種各樣的工具，比如遷移數據庫(sts,dms),遷移workload（aws server migration service）,協助你計劃遷移收集信息的工具(aws application discovery service),track遷移進程的工具(migration hub),遷移海量數據的aws snowball or snowmobile,s3 acceleration, 加速數據傳輸的 dierct connect等等，從網絡到數據庫到文件，給你武裝到牙齒
以下是兩篇關於數據遷移的好文
https://medium.com/@awsontop/aws-cloud-migration-strategy-and-process-6ed38479735a
https://www.slideshare.net/AmazonWebServices/accelerating-your-portfolio-migration-to-aws-using-aws-migration-hub-ent321-reinvent-2017</description></item><item><title>aws online analytical processing (or OLAP)</title><link>https://clouda3.github.io/posts/aws-glue-athena-quicksight/</link><pubDate>Tue, 10 Sep 2019 14:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-glue-athena-quicksight/</guid><description> OLAP在線分析工具越來越來成熟，從開始的數據倉庫，到強大的elk，再到雲，比如aws的 gaq(glue-athena-quicksight)，當然aws也有elk在線服務
gaq vs elk,實際上是一類的產品，glue提供了crawler去爬去數據，類似 logstash，athena提供查詢工具類似elasticsearch ,quicksight 跟 kibana一樣ui.gaq是aws雲端的服務，沒有辦法部署在線下，elk既可以部署在op也可以部署在cloud上
這篇文章來自 https://medium.com/localz-engineering/serverless-big-data-start-here-aws-glue-athena-quicksite-4c70ecac9fe3
有一個圖片 實驗 cloudwatch agent 或者 application discovery agent 到ec2
cloud watch agent 或者 discovery agent sync log 到 s3
glue裡面創建crawler ，指定s3
glue裡面創建database 和table
athena 寫sql語句查詢想要的數據
如果想要類似kinana那樣可視化的工具，那麼需要付費quicksight
完</description></item><item><title>Difference between user pool and identity pool(Federated Identities)</title><link>https://clouda3.github.io/posts/aws-difference-between-userpool-and-identitypool/</link><pubDate>Fri, 06 Sep 2019 12:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-difference-between-userpool-and-identitypool/</guid><description>剛開始使用cognito服務的時候特別讓人困惑，有user pool 和 identity pool(Federated Identities)，user pool裡面還有federation，federation裡面有identity provider. identity pool 裡面有autenticated provider裡面也有user pool ID! 納尼?這是什麼鬼? let&amp;rsquo;s forget the connection between them user pool 簡單來說就是提供一個用戶驗證的服務，比如用戶自定義用戶，用fb,GOOGLE，twitter等賬戶登錄，登錄後獲取一個token，用戶的每次請求帶著這個token就可以了，用戶登錄後獲取的是你個人應用的resource! ,比如你自己做了一個網站，登錄後可以管理自己用戶，權限，圖片等等，你有權限去訪問這些資源 identity pool 也是提供一個用戶認證的服務，用戶可以在裡面設置aws 的role，也就說用戶登錄後得到的aws的resource 的訪問權限，比如你可以訪問s3.只是這個登錄可以跟 user pool提供的服務去綁定，也可以不用user pool的服務直接用 identity pool裡面的provider去對接，也就說，如果你有google的id也可以登錄後獲取aws resource 資源的訪問權限，這個是登錄後aws通過sts生成臨時credential 來做到的 summary user pool 只是負責authentication，沒有authorization，即便有也是用戶本身應用的服務 identity pool，既可以authentication，又可以authoriztion，授權的是aws的resource 上幾張圖 幾個非常有價值的link https://serverless-stack.com/chapters/cognito-user-pool-vs-identity-pool.html https://gorillalogic.com/blog/java-integration-with-amazon-cognito/</description></item><item><title>Aws cognito sample</title><link>https://clouda3.github.io/posts/aws-cognito-sample/</link><pubDate>Fri, 06 Sep 2019 10:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-cognito-sample/</guid><description> 这是一个aws官方的文档，我认为最好的cognito的例子，如果理解这个sample，那么cognito就没有任何问题 https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/ 详解 廢話少說直接上圖 程序組成部分 - 靜態的代碼存放s3 - 動態的代碼存放lambda - 代碼的訪問入口通過api-gateway - 數據的存放時dynamoDB(程序登錄後有個點擊頁面位置生成的數據,與用戶驗證沒有太多關係) Cognito user pool 在user login 流程 - 用戶用用戶名+密碼(或mfa，這取決於cognito user pool的配置)請求登錄 - aws cognito user pool去驗證用戶 - 如果用戶通過驗證返回一個token - 下一次用戶用這個token來請求訪問 - aws cognito user pool 可以基本满足用户登录，如果涉及到权限可以跟自己数据进行绑定 - 这个例子里面特别要注意的是，api gateway 直接设置了 Authorizers ：里面可以指定cognito 来对用戶進行驗證，不用額外寫程序來驗證，也就說每次訪問一個服務/ride.html,api-getway通過Authorizers直接去用cognito去驗證用戶的token - 這個例子分了兩個步驟，第一個步驟是直接登錄，登錄後獲得一個toke - 第二步驟是用api-gateway 自動驗證用戶的登錄，也就是authentication</description></item><item><title>Aws cloudformation deploy lambda and apigateway</title><link>https://clouda3.github.io/posts/aws-cloudformation-lambda-apigateway/</link><pubDate>Thu, 05 Sep 2019 12:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-cloudformation-lambda-apigateway/</guid><description>用Cloudformation 来部署 java 的lambda 和api gateway,这里要用到spring-boot写java 代码，需要用到s3，存放lambda代码，需要创建lambda function和api agetway，还需要用到sam Aws lambda with Spring Boot 本文用到的git代码来自 https://github.com/gemerick/spring-boot-lambda 本文的内容来自 https://keyholesoftware.com/2018/04/26/aws-lambda-with-spring-boot/ 本文的步骤 安装sam git 克隆现有代码 创建s3 bucket 用cloudformation 上传 代码 用cloudformation 部署 测试代码 安装sam pip3 install --user aws-sam-cli git 克隆代码 git clone https://github.com/gemerick/spring-boot-lambda -b lambda mvn clean package 创建s3 bucket aws s3 mb s3://spring-boot-lambda-20100905 拷贝jar 到S3 ，更新sam的template aws cloudformation package --template-file sam.yaml --output-template-file target/output-sam.</description></item><item><title>Aws ecs tutorial</title><link>https://clouda3.github.io/posts/aws-ecs-tutorial/</link><pubDate>Wed, 04 Sep 2019 09:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-ecs-tutorial/</guid><description>Aws ecs 简单来说就是host docker container，跟K8S类似，如果用过k8s，那么ecs非常的好理解 本文主要按照 Gentle Introduction to How AWS ECS Works with Example Tutorial 搭建 关于ECS的专业的词汇 Task Definition ：实际就是要给launch configration,比如暴露端口号，用什么docker image，cpu 内存需要多少，运行docker 的command，环境变量
Task ：简单来说就是一个running instance
Service ：一组task
Cluster ：一组task 跑在一个或者多个 constainer 里面
Container Instance ：容器实例里面跑的是多个 task
按照此图搭建一组ecs的服务 创建一个ecs cluster 创建一个ecsServiceRole 创建Task Definition 创建elb和 target group 创建 service，里面只有一个task 检查运行情况 把service里面的task 改为4 创建一个ecs cluster 创建secrutiry group my-ecs-sg</description></item><item><title>aws数据库迁移工具简介</title><link>https://clouda3.github.io/posts/aws-sct-dms-tutorial/</link><pubDate>Tue, 03 Sep 2019 14:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-sct-dms-tutorial/</guid><description>Aws数据库迁移工具简介 越来越多的公司选择把服务迁移到云上,那么数据库的迁移尤其重要，亚马逊提供了数据迁移的工具 sct（schema converstion tool） 和 dms （data migration service）两个工具协作帮助客户从线下数据库导入到线上数据库,source 和 target 的database可以不是一种数据库类型，比如从mysql到oracle，或者mysql 到postgresql
简单介绍一下sct，简单点来说就是数据库schema转换工具，把本地的数据库的schema转换为aws线上目标数据库的schema，然后在线上导入这个schema生成数据库,然后用DMS帮你把数据导出到aws上
把aws mysql RDS 数据库 导出到 aws postgresql RDS 实验的目标就是把mysql数据库迁移到postgresql，由于在aws cloud上做比较方面，所以选择了都在云上来迁移做实验
Down load Aws schema convertion tool
create mysql database on aws
create database：test and table myclass with 2 column:id name
test id name 1 hello 2 kitty create postgresql database on aws
Open aws sct</description></item><item><title>eni or eip can not be deleted</title><link>https://clouda3.github.io/posts/aws-eni-can-not-be-deleted/</link><pubDate>Mon, 02 Sep 2019 14:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-eni-can-not-be-deleted/</guid><description> 我几乎删除了所有的service，但是eni就是不让我删除 关联的eip也不让删除 我去aws社区看了很多帖子最后发现主要原因有两个地方 efs 使用eni nat gatway 使用了eni 根据这两点，我去查找，果然有个natgateway 使用eni，删除掉nat gateway后，eni可以删除，eip可以release了</description></item><item><title>一个ec2 instance上配置多个eni</title><link>https://clouda3.github.io/posts/aws-multi-eni-on-one-ec2-instance/</link><pubDate>Mon, 02 Sep 2019 08:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-multi-eni-on-one-ec2-instance/</guid><description>一个ec2 instance 配置多网卡 首先要确定你需要几个公网IP，以2个为例 首先要确定你需要几个网卡，以2个为例 申请两个 elastic ip：IP1 ip2 申请两个eni(network interface)：eni1，eni2 创建一个ec2 把ip1 绑定到eni1,elastic ip-&amp;gt;选中IP-&amp;gt;associate-&amp;gt;resource type:network interface -&amp;gt; private ip 自动选择 把ip2 绑定到eni2,此处省略步骤 把eni1绑定到ec2，network interface 页面-&amp;gt;选择eni1-&amp;gt;attach-&amp;gt; 选择 ec2 instance id 把eni2绑定到ec2,此处省略步骤 在ec2 instance 页面,看到iP里面公网IP只有一个，private ip 有2个 为什么少了一个?用putty connnect 这个两个ip，都是没有问题，ec2 的console不显示而已
[ec2-user@ip-172-31-1-176 ~]$ ifconfig eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 9001 inet 172.31.1.176 netmask 255.255.255.0 broadcast 172.31.1.255 inet6 fe80::8a:93ff:fefd:ef5c prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; ether 02:8a:93:fd:ef:5c txqueuelen 1000 (Ethernet) RX packets 4115218 bytes 1170825027 (1.</description></item><item><title>service catalog 简介</title><link>https://clouda3.github.io/posts/aws-service-catalog/</link><pubDate>Thu, 29 Aug 2019 10:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-service-catalog/</guid><description> Aws service catalog 简介 aws service catalog 从字面上看就是服务目录,也就是说一些服务放入一组，进行统一的规划，那里一些可以进行统一的规划呢？ 几个关键词 portfolio product constraint 傳統資源創建存在問題 從亞馬遜的blog上盜圖
上圖存在的幾個問題非常明顯
創建了一組資源，資源與資源之間無法互訪
EC2要訪問s3 ，那麼需要管理員授權
管理授權就要破壞兩個原則：service self-sufficient不滿足，最小權利原則(那就要定義允許ec2訪問s3的policy，所有的實例都可以訪問)
如何做到產品內部服務可以互訪，而產品外部的服務無權訪問呢？ 從亞馬遜的blog上盜圖
A和B是兩個portfolio ，組內可以互訪，但是A和B之間無法訪問
一個使用場景介紹 從亞馬遜的blog上盜圖
比如產品添加了一個s3-08的一個bucket，如果做到允許EC2_04訪問，而不允許其他產品或者本產品內部其他EC2訪問的呢？這就要用到 service catalog來解決
具體例子請看 (https://aws.amazon.com/blogs/mt/create-a-security-partition-for-your-applications-using-aws-service-catalog-and-aws-lambda/)</description></item><item><title>aws infrastructure as code</title><link>https://clouda3.github.io/posts/aws-infrastructure-as-code/</link><pubDate>Thu, 29 Aug 2019 08:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-infrastructure-as-code/</guid><description/></item><item><title>使用Aws sts创建临时credential</title><link>https://clouda3.github.io/posts/aws-sap-sts-service/</link><pubDate>Mon, 26 Aug 2019 08:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-sap-sts-service/</guid><description>Aws sts 简介 简单来说就是aws通过sts服务生成临时的credential给用户使用，他们可以设置有效期，自动失效,这也是amazon best practice 里面建议的方式 实验准备 创建 User 创建 Role 创建 s3 作为测试 为User创建sts assumeRole 的访问策略 在EC2上使用Aws cli 创建 历史的credential 访问s3 Create an IAM user https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/users input name： mystsuser access type programmatic access 其他保持默认 Create role for antoher aws account https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/roles 选择：another aws account Account ID: 找到上面的user 的arn，XXX就是ID (arn:aws:iam::XXXX:user/mystsuser) Attach plicy 搜索s3，选择 AmanzonS3ReadOnlyAccess,next reviews and create Role，input role name：sts-s3-read-only 创建完毕后，Update/Modify Trust Relationships replace (this is the arn of the user what you created) with arn:aws:iam::XXXX:user/mystsuser</description></item><item><title> 使用Aws System Manager 统一管理 aws resource</title><link>https://clouda3.github.io/posts/aws-sap-system-manager/</link><pubDate>Sun, 25 Aug 2019 16:30:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-sap-system-manager/</guid><description>使用Aws System Manager 统一管理 aws resource Aws system Manager 简介 AWS Systems Manager gives you visibility and control of your infrastructure on AWS. Systems Manager provides a unified use:qr interface so you can view operational data from multiple AWS services and allows you to automate operational tasks across your AWS resources
Aws system manager AWS 让您能够查看和控制 AWS 上的基础设施。Systems Manager 可以提供一个统一的用户界面，供您查看多种 AWS 服务的运行数据，并在 AWS 资源上自动执行操作任务。
使用场景 比如我有个20台 linux ec2，不管什么类型的，只要安装centyos，那么都要给他安装 ，cloudwatch agent 来对系统的disk和memory进行监控 实验的前置条件 你的系统上必须安装SSM Agent 你的EC2的role 必须具有 AmazonEC2RoleforSSM 的policy attach上去 安装SSM agent Intel (x86_64) 64 位实例： sudo yum install -y https://s3.</description></item><item><title>NAT instance setup 简介</title><link>https://clouda3.github.io/posts/aws-nat-instance-setup/</link><pubDate>Tue, 20 Aug 2019 14:40:37 +0800</pubDate><guid>https://clouda3.github.io/posts/aws-nat-instance-setup/</guid><description>AWS NAT instance setup 简介 NAT（Network Address Translation，网络地址转换）是1994年提出的。当在专用网内部的一些主机本来已经分配到了本地IP地址（即仅在本专用网内使用的专用地址），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。 AWS NAT gateway Aws 有專門的nat gateway,並且是HA的，只要創建gateway然後更改一下，subnet的路由就可以了，所以自己搭建一個nat gateway實際並不是aws的範疇，實際是一個linux系統的問題 手動搭建一個nat instance private subnet1/ instance1 / sg1(secrutiry group) / internal IP1 -&amp;gt;local node1 public subnet2/ instance2 / sg2(sercirity group) / internal IP2 /public ip2 -&amp;gt; proxy node2 配置proxy node vi /etc/sysctl.conf net.ipv4.ip_forward=1 iptables -t nat -A POSTROUTING -o eth0 -s 192.168.1.0/24 -j MASQUERADE 192.168.1.0/24 為本地網絡CIDR
EC2 頁面，選中proxy node2 -&amp;gt;Action -&amp;gt;Networking -&amp;gt;Disable source/Desk Check</description></item><item><title>关于我</title><link>https://clouda3.github.io/about/</link><pubDate>Wed, 14 Aug 2019 18:03:46 +0800</pubDate><guid>https://clouda3.github.io/about/</guid><description> 关于我 我是云端 , 一个中年老年IT从业者,B站、知乎、github深度用户,aws云使用者,平时折腾Linux，Java、ruby、shell、go都略懂一些,亚马逊云深度用户 个人认证 aws系统架构师助理认证(aws solution architect association) aws系统架构师专业认证(aws solution architect professional) 红帽Linux认证工程师(redhat certified engineer) 最近工作 hugo ssg网站的制作和教学 Aws 云服务 站群、爬虫、自动翻译的结合</description></item><item><title/><link>https://clouda3.github.io/posts/alicloud-terraform-create-ecs-ansible-provision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://clouda3.github.io/posts/alicloud-terraform-create-ecs-ansible-provision/</guid><description>使用terraform创建ecs用ansible完成ecs的provision 本文目标就是是用terraform创建ecs包括security group,disk,vpc,vswtich,然后用ansible来初始化和配置创建好的ecs 本文只是创建了一个单机ecs，后续的文章会有load balance出现 terrorm 创建ecs 什么是terraform terraform是云工具，也就是针对云平台的 terraform是在云平台上管理资源的，就是一个云资源编排工具 terraform目标是&amp;rdquo;Write, Plan, and create Infrastructure as Code&amp;rdquo;, 基础架构即代码。具体的说就是可以用代码来管理维护 IT 资源，把之前需要手动操作的一部分任务通过程序来自动化的完成，这样的做的结果非常明显：高效、不易出错。 Terraform 核心功能
基础架构即代码(Infrastructure as Code) 执行计划(Execution Plans) 资源图(Resource Graph) 自动化变更(Change Automation) terraform安装
下载https://www.terraform.io/downloads.html 设置环境变量（省略） 创建terraform 配置文件
main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;xxx&amp;quot; secret_key = &amp;quot;xxx&amp;quot; region = &amp;quot;ap-southeast-1&amp;quot; #version = &amp;quot;~&amp;gt; 1.5.0&amp;quot; } data &amp;quot;alicloud_instance_types&amp;quot; &amp;quot;instance_type&amp;quot; { instance_type_family = &amp;quot;ecs.</description></item></channel></rss>